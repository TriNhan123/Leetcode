class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        def findPath(root, v, path): 
            if root.val == v: 
                return True 
            elif root.left and findPath(root.left, v, path):
                path.append("L")
            elif root.right and findPath(root.right, v, path):
                path.append("R")
            #if path empty, return true
            return path 
            
        path_s, path_d = [], []
        findPath(root, startValue, path_s)
        findPath(root, destValue, path_d)
        
        while len(path_s) and len(path_d) and path_s[-1] == path_d[-1]: 
            path_s.pop()
            path_d.pop()
        
        return "".join("U" * len(path_s)) + "".join(reversed(path_d))
-----------------------------------------------------------------------------
Google find path in 1 pass:
class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        if not root: 
            return ""
        q = deque([(root, "")])
        start, dest = "", ""
        while q: 
            node, path = q.popleft() 
            if node.val == startValue: 
                start = path 
            if node.val == destValue: 
                dest = path 
            if node.left: 
                q.append((node.left, path + "L"))
            if node.right: 
                q.append((node.right, path + "R"))
            if start and dest: break 
        
        i = 0 
        while i < min(len(start), len(dest)) and start[i] == dest[i]: 
            i += 1 
        return "U" * (len(start) - i) + dest[i:]
