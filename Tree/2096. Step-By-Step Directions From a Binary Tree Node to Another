class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        def findPath(root, v, path): 
            if root.val == v: 
                return True 
            elif root.left and findPath(root.left, v, path):
                path.append("L")
            elif root.right and findPath(root.right, v, path):
                path.append("R")
            #if path empty, return true
            return path 
            
        path_s, path_d = [], []
        findPath(root, startValue, path_s)
        findPath(root, destValue, path_d)
        
        while len(path_s) and len(path_d) and path_s[-1] == path_d[-1]: 
            path_s.pop()
            path_d.pop()
        
        return "".join("U" * len(path_s)) + "".join(reversed(path_d))
-----------------------------------------------------------------------------
Google find path in 1 pass:
class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:  
        stack= [(root, "")] 
        start, end = "", ""
        while stack:
            node, path = stack.pop()
            if node.left: 
                stack += [(node.left, path + "L")]
            if node.right: 
                stack += [(node.right, path + "R")]
            if node.val == startValue: start = path 
            if node.val == destValue: end = path 
            if start and end:
                break

        i = 0 # To ignore common path
        while i < min(len(start), len(end)) and start[i] == end[i]:
            i += 1

        return "U" * (len(start) - i) + end[i:]
--------------------------------------------------------------------------------
1 pass with queue: 
class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        if root is None:
            return ""

        dq = collections.deque()
        dq.append((root, ""))
        start_found = False
        dest_found = False
        start_path = ""
        dest_path = ""
        while len(dq) > 0 and not (start_found and dest_found):
            node, path = dq.popleft()
            if node.val == startValue:
                start_found = True
                start_path = path
            elif node.val == destValue:
                dest_found = True
                dest_path = path
            if node.left is not None:
                dq.append((node.left, path + "L"))
            if node.right is not None:
                dq.append((node.right, path + "R"))
        i = 0
        while len(start_path) > i and len(dest_path) > i and start_path[i] == dest_path[i]:
            i += 1
        return (len(start_path) - i) * 'U' + dest_path[i:]
