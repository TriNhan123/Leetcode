# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        
        def findPath(root, v, path): 
            if root.val == v: 
                return True 
            elif root.left and findPath(root.left, v, path):
                path.append("L")
            elif root.right and findPath(root.right, v, path):
                path.append("R")
            return path 
            
        path_s, path_d = [], []
        findPath(root, startValue, path_s)
        findPath(root, destValue, path_d)
        
        while len(path_s) and len(path_d) and path_s[-1] == path_d[-1]: 
            path_s.pop()
            path_d.pop()
        
        return "".join("U" * len(path_s)) + "".join(reversed(path_d))
