# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        
        def findPath(root, v, path): 
            if root.val == v: 
                return True 
            elif root.left and findPath(root.left, v, path):
                path.append("L")
            elif root.right and findPath(root.right, v, path):
                path.append("R")
            #if path empty, return true
            return path 
            
        path_s, path_d = [], []
        findPath(root, startValue, path_s)
        findPath(root, destValue, path_d)
        
        while len(path_s) and len(path_d) and path_s[-1] == path_d[-1]: 
            path_s.pop()
            path_d.pop()
        
        return "".join("U" * len(path_s)) + "".join(reversed(path_d))
-----------------------------------------------------------------------------
Google find path in 1 iteration: 
class Solution:

    def dfs(self, root, tarv):
        stk = [root]
        path = []
        visited = set()
        p = root
        
        while stk:
            if p and p.val == tarv:
                return path
            if p.left and p.left not in visited:
                stk.append(p)
                path.append('L')
                p = p.left
            elif p.right and p.right not in visited:
                stk.append(p)
                path.append('R')
                p = p.right
            else:
                visited.add(p)
                path.pop()
                p = stk.pop()
        
        
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        st_path = self.dfs(root, startValue)
        en_path = self.dfs(root, destValue)
        
        i = 0
        while i < min(len(st_path), len(en_path)):
            if st_path[i] != en_path[i]:
                break
            i += 1
        
        cmn_path = st_path[:i]
        
        res = 'U'*(len(st_path)-i) + ''.join(en_path[i:])
        return res
