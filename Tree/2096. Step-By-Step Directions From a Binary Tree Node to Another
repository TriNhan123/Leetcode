# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        
        def findPath(root, v, path): 
            if root.val == v: 
                return True 
            elif root.left and findPath(root.left, v, path):
                path.append("L")
            elif root.right and findPath(root.right, v, path):
                path.append("R")
            #if path empty, return true
            return path 
            
        path_s, path_d = [], []
        findPath(root, startValue, path_s)
        findPath(root, destValue, path_d)
        
        while len(path_s) and len(path_d) and path_s[-1] == path_d[-1]: 
            path_s.pop()
            path_d.pop()
        
        return "".join("U" * len(path_s)) + "".join(reversed(path_d))
-----------------------------------------------------------------------------
Google find path in 1 iteration: 
class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:  
        stack, start, end = [(root, "")], "", ""

        while stack:
            node, path = stack.pop()
            stack = stack + [(node.left, path + "L")] if node.left else stack
            stack = stack + [(node.right, path + "R")] if node.right else stack

            start = path if node.val == startValue else start
            end = path if node.val == destValue else end

            if start and end:
                break

        i = 0 # To ignore common path
        while i < min(len(start), len(end)) and start[i] == end[i]:
            i += 1

        return "U" * (len(start) - i) + end[i:]
