class Solution:
    def longestConsecutive(self, root: Optional[TreeNode]) -> int: 
        ans = float("-inf")
        def dfs(node, parent): 
            if not node:
                return 0, 0
            #calculate subtree first then return them to calculate at current node 
            left_inc, left_dec = dfs(node.left, node)
            right_inc, right_dec = dfs(node.right, node) 
            
            nonlocal ans 
            ans = max(ans, left_inc + right_dec + 1, right_inc + left_dec + 1) 
            
            if parent and node.val == parent.val + 1: 
                return max(left_inc, right_inc) + 1, 0 
            if parent and node.val == parent.val - 1:
                return 0, max(left_dec, right_dec) + 1
            return 0, 0 
        dfs(root, root)
        return ans 
