class Solution:
    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:
        class UF:
            def __init__(self, n): self.p = list(range(n))
            def union(self, x, y): self.p[self.find(x)] = self.find(y)
            def find(self, x):
                if x != self.p[x]: self.p[x] = self.find(self.p[x])
                return self.p[x]
        dsu = UF(len(s))
        component_char = defaultdict(list) 
        ans = []
        for u, v in pairs: 
            dsu.union(u, v) 
        for i in range(len(s)): 
            component_char[dsu.find(i)].append(s[i])
        for key in component_char.keys(): 
            component_char[key].sort(reverse = True)
        for i in range(len(s)): 
            ans.append(component_char[dsu.find(i)].pop())
        return "".join(ans)
