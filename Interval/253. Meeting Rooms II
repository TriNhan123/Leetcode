class Solution:
    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        intervals.sort(key= lambda x: x[0])
        n = len(intervals)
        start = sorted([i[0] for i in intervals])
        end = sorted(i[1] for i in intervals) 
        
        res = count = 0 
        s = e = 0 
        while s < n: 
            if start[s] < end[e]: 
                s += 1 
                count += 1
            else: 
                e += 1 
                count -= 1 
            res = max(res, count) 
        return res 
--------------------------------------------------------------------
class Solution:
    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        intervals.sort(key= lambda x: x[0]) 
        minHeap = []
        heapq.heappush(minHeap, intervals[0][1]) 
        for i in range(1, len(intervals)): 
            if intervals[i][0] >= minHeap[0]: #when a room is free
                heapq.heappop(minHeap) 
            heapq.heappush(minHeap, intervals[i][1])                
        return len(minHeap)
