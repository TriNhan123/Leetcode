class Solution:
    def alphabetBoardPath(self, target: str) -> str:
         
        #calculate difference between current char: coor to targetChar: coor
            #y vs yO, x vs x0
        #since 'z' is in the left bottom corner, need to prioritize to move UP or LEFT first
        #Then prioritize to move to the RIGHT second, 
            #since from character v or w or x or y, we can't move down.
        #O(n) time and O(n) space 
            
        #build HashTable with char: coor 
        board = {char: [i // 5, i % 5] for i, char in enumerate(string.ascii_lowercase)}
        #y vs target_y, x vs target_x 
        x0, y0 = 0, 0 
        res = ""
        for c in target: 
            x, y = board[c] 
            if y0 > y: res += 'L' * (y0 - y)
            if x0 > x: res += 'U' * (x0 - x)
            if y0 < y: res += 'R' * (y - y0) #cant move R before U from 'z' 
            if x0 < x: res += 'D' * (x - x0)
                        
            #when x0 = x, y0 = y: 
            res += '!'
            #update coor: 
            x0, y0 = x, y 
        return res 
