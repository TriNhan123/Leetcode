# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        #find where the "tail" pointing to
        #find what is tail.next from head 
        #traverse the link list 
        #when hit tail, i find where tail.next is
        # current = head
        # while current is not None: 
        #     current = current.next
        # if current.next is not None and current.next != current: 
        #     return True 
        # else:
        #     return False
        #this is not possible since the linked list will run over the cycle
        
        #have i point to this node before? 
        #check if current.next = any of the "stored" node
        nodes = {}
        current = head
        while current is not None: 
            if current in nodes:
                return True
            else: 
                nodes[current] = True 
            current = current.next
        return False
