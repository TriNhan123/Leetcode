O(N) time, O(1) space 
def isPalindrome(self, head: Optional[ListNode]) -> bool:
        def reverse(head): 
            prev = None 
            curr = head 
            while curr: 
                next_node = curr.next 
                curr.next = prev
                prev = curr
                curr = next_node
            return prev
        def end_of_first_half(head): 
            fast = head
            slow = head
            while fast.next and fast.next.next: 
                fast = fast.next.next 
                slow = slow.next 
            return slow 
        
        if not head: 
            return True 
        end_1st = end_of_first_half(head) 
        start_2nd = reverse(end_1st.next)
        
        result = True 
        first = head 
        second = start_2nd 
        while result and second: 
            if first.val != second.val: 
                result = False 
            first = first.next 
            second = second.next 
            
        end_1st.next = reverse(start_2nd)
        return result 
----------------------------------------------------------------------------
O(N) time, O(N) space
def isPalindrome(self, head: ListNode) -> bool:
    vals = []
    curr= head
    while curr is not None:
        vals.append(curr.val)
        curr = curr.next
    return vals == vals[::-1]
