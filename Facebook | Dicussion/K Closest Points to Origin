#time O(N logK), space: O(K) 
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        maxHeap = [] 
        for point in points: 
            d = - (point[0]**2 + point[1]**2)
            heapq.heappush(maxHeap, [d, point])
            if len(maxHeap) > k: 
                heapq.heappop(maxHeap)
        return [point for _, point in maxHeap]
------------------------------------------------------------------------------
#time O(K logN), space: O(N) 
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        minHeap = []
        for point in points: 
            distance = point[0]**2 + point[1]**2
            minHeap.append([distance, point])
        heapq.heapify(minHeap)
        res = []
        for _ in range(k): 
            dist, point = heapq.heappop(minHeap)
            res.append(point)
        return res
