#time O(N logK), space: O(K) 
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        maxHeap = [] 
        for point in points: 
            d = - (point[0]**2 + point[1]**2)
            heapq.heappush(maxHeap, [d, point])
            if len(maxHeap) > k: 
                heapq.heappop(maxHeap)
        return [point for _, point in maxHeap]
------------------------------------------------------------------------------
#time O(K logN), space: O(N) 
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        minHeap = []
        for point in points: 
            distance = point[0]**2 + point[1]**2
            minHeap.append([distance, point])
        heapq.heapify(minHeap)
        res = []
        for _ in range(k): 
            dist, point = heapq.heappop(minHeap)
            res.append(point)
        return res
-------------------------------------------------------------------------------
#time O(N), space O(1) 
    def kClosest(self, P, k):
        euclidean = lambda p : p[0]**2 + p[1]**2
        def quickSelect(l, r): 
            if l > r: return P
            pivot_index = random.randint(l, r) 
            pivot_value = euclidean(P[pivot_index])
            P[pivot_index], P[r] = P[r], P[pivot_index]
            p = l 
            for i in range(l, r): 
                if euclidean(P[i]) <= pivot_value: 
                    P[i], P[p] = P[p], P[i]
                    p += 1 
            P[p], P[r] = P[r], P[p]
            
            if p > k:   return quickSelect(l, p - 1) 
            elif p < k: return quickSelect(p + 1, r) 
            else:       return P[:k]
            
        return quickSelect(0, len(P) - 1)
