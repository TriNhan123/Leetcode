class Solution(object):
    def makeConnected(self, n, connections):
        """
        :type n: int
        :type connections: List[List[int]]
        :rtype: int
        """
        dsu = DSU(n)
        
        extra = 0 
        
        for u,v in connections: 
            if not dsu.union(u,v): 
                extra += 1 
        count = 0 
        for x in range (n): 
            if x == dsu.parent[x]: 
                count +=1
        if extra >= count - 1: 
            return count-1
        return -1
class DSU:
    def __init__(self, N):
        self.parent = list(range(N))
        self.size = [1] * N

    def find(self, x):
        if x != self.parent[x]:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        xr, yr = self.find(x), self.find(y)

        if xr == yr: return False

        if self.size[xr] < self.size[yr]:
            xr, yr = yr, xr

        self.size[xr] += self.size[yr]
        self.size[yr] = self.size[xr]
        self.parent[yr] = xr
        return True
