class Solution:
    def isValidPalindrome(self, s: str, k: int) -> bool:
        if s == s[::-1]: return True
        
        @lru_cache(None)
        def dfs(l, r, count):
            nonlocal k
            while l < r:
                if s[l] == s[r]:
                    l+=1
                    r-=1
                else:
                    if count < k:
                        count += 1
                        return dfs(l + 1, r, count) or dfs(l, r - 1, count)
                    elif count == k:  #cannot afford more mistakes
                        return False
            return True
        return dfs(0, len(s) - 1, 0)
---------------------------------------------------------------------------
class Solution:
    def isValidPalindrome(self, s: str, k: int) -> bool:
        #think like valid palindrome, i at 0, j at end
        #if matched, move i and j
        #if not, move i or j 
        dp = [[0 for _ in s] for _ in s ]
        for i in range(len(s) - 2, -1, -1): 
            for j in range(i + 1, len(s)): 
                if s[i] == s[j]: 
                    dp[i][j] = dp[i + 1][j - 1]
                else: 
                    dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])
        return dp[0][-1] <= k 
