class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        # sort() then find k th element 
        # => NlogN 
        # time add element to heap size k = O(logK) 
        # do it N time: O(NlogK), space O(K)
            
        # return heapq.nlargest(k, nums)[-1]
        
        #idea: N - k position in sorted array 
        #quick select
        #normal selection sort: NlogN 
            #pick a pitvot
            #partition smaller on left pivot, larger on right pivot 
            #we know which part to search for N - k element 
            # => NlogN => N ave, N^2 worst time 
        #kth largest element = N - k smallest element 
        def partition(l, r, pivot_index): 
            pivot = nums[pivot_index]
            #1. move pivot to end 
            nums[pivot_index], nums[r] = nums[r], nums[pivot_index]
            #2. move all smaller to left 
            pivot_pos = l 
            for i in range(l, r): 
                if nums[i] < pivot: 
                    nums[pivot_pos], nums[i] = nums[i], nums[pivot_pos]
                    pivot_pos += 1 
            #3. move pivot to its place 
            nums[r], nums[pivot_pos] = nums[pivot_pos], nums[r]
            return pivot_pos 
        def select(l, r, k_smallest): 
            if l == r: 
                return nums[l]
            #select random pivot_index
            pivot_index = random.randint(l, r)
            #find its postion in sorted list
            pivot_index = partition(l, r, pivot_index) 
            
            #if pivot in final sorted pos: 
            if k_smallest == pivot_index: 
                return nums[k_smallest]
            #go left 
            elif k_smallest < pivot_index: 
                return select(l, pivot_index - 1, k_smallest) 
            #go right
            else: 
                return select(pivot_index + 1, r, k_smallest) 
        return select(0, len(nums) - 1, len(nums) - k)
        
