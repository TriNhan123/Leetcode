# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if not root: 
            return root 
        if root.val == p.val or root.val == q.val: 
            return root
        ancestor_left = self.lowestCommonAncestor(root.left, p, q) 
        ancestor_right = self.lowestCommonAncestor(root.right, p, q)
        #if we find p, q in different subtree then root is their LCA: 
        if ancestor_left and ancestor_right: 
            return root 
        #they both exist in left or right subtree
            #then their LCA must exist in left or right subtree
        return ancestor_left or ancestor_right
