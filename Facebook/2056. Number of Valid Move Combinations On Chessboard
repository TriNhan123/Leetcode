class Solution:
    def countCombinations(self, pieces: List[str], positions: List[List[int]]) -> int:
        n = len(pieces)
        mp = {"bishop": ((-1, -1), (-1, 1), (1, -1), (1, 1)),
              "queen" : ((-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)), 
              "rook"  : ((-1, 0), (0, -1), (0, 1), (1, 0))}
        
        board = [[set() for _ in range(8)] for _ in range(8)]
        n = len(pieces)
        for pos in positions:
            # adjust the positions to make them start with 0 
            pos[0] -= 1
            pos[1] -= 1
        all_time = set(range(1, 8)) # move for at most 8 seconds because only 8x8 board
        def dfs(i):
            if i == n:
                return 1
            ans = 0
            r, c = positions[i]
            if not board[r][c] & all_time:
                # if the position of piece i is available all the time, consider not moving this piece at all
                board[r][c] |= all_time
                ans += dfs(i + 1) # try to find the move of the next piece
                board[r][c].clear() # undo the move for the current piece
                
            for dr, dc in mp[pieces[i]]:
                nr, nc = r + dr, c + dc 
                count = 1  
                while 0 <= nr < 8 and 0 <= nc < 8 and count not in board[nr][nc]:
                    # if board[nr][nc] is available at time count, the move is valid
                    board[nr][nc].add(count) 
                    count += 1
                    rest = set(range(count, 8))
                    if not board[nr][nc] & rest:
                        # if the board is available for the rest of the time, the move might stop here
                        board[nr][nc] |= rest
                        ans += dfs(i + 1)
                        board[nr][nc] -= rest
                    nr += dr
                    nc += dc
                # undo the last update
                count -= 1
                nr -= dr
                nc -= dc
                while count:
                    # undo the updates of the piece
                    board[nr][nc].remove(count)
                    count -= 1
                    nr -= dr
                    nc -= dc
            return ans
        return dfs(0)
