class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        #O(N log K) 
        #max heap: space = O(K), use a K size heap
        def getDistance(point): 
            x = point[0]
            y = point[1]
            return math.sqrt(x*x + y*y)
        maxHeap = []
        for point in points:
            d = -getDistance(point)
            heapq.heappush(maxHeap, (d, point))
            if len(maxHeap) > k: 
                heapq.heappop(maxHeap)
        return [point for _, point in maxHeap] 
        
----------------------------------------------------------------------------------
class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        #min heap: make a min heap with n, pop k times, space = O(N)
        def getDistance(point): 
            x = point[0]
            y = point[1]
            return math.sqrt(x*x + y*y)
        minHeap = [] 
        for point in points: 
            d = getDistance(point) 
            minHeap.append([d, point])
        heapify(minHeap)
        ans = [] 
        for i in range(k): 
            _, point = heappop(minHeap) 
            ans.append(point) 
        return ans 
------------------------------------------------------------------------------------
class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        #QuickSelect 
        def getDistance(point): 
            return point[0] ** 2 + point[1] ** 2 
        def partition(l, r): 
            pivot_index = random.randint(l, r)
            pivot = getDistance(points[pivot_index]) 
            points[pivot_index], points[r] = points[r], points[pivot_index]
            i = l 
            #to r + 1 so we don't need to check if i reach r 
            for j in range(l, r + 1): 
                if getDistance(points[j]) <= pivot: 
                    points[i], points[j] = points[j], points[i]
                    i += 1 
            return i - 1
        n = len(points)
        l, r = 0, n - 1 
        
        while n != k: 
            n = partition(l, r)
            if n < k:
                l = n + 1 
            else: 
                r = n - 1 
        return points[:k]
