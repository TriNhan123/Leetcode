O(N) time, O(N) space
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        storeCopyNode = defaultdict(lambda: Node(0))
        storeCopyNode[None] = None 
        curr = head 
        while curr: 
            storeCopyNode[curr].val = curr.val
            storeCopyNode[curr].next = storeCopyNode[curr.next]
            storeCopyNode[curr].random = storeCopyNode[curr.random] 
            curr = curr.next 
        return storeCopyNode[head]
-------------------------------------------------------------------------------
O(N) time, O(1) space, put copy node next to original node in LL
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        dummy = copy = Node(-1, head, None) 
        while head: #put copy node next to ori node
            tmp = head.next 
            head.next = Node(head.val, None, head.random)
            copy.next = head.next
            head = tmp 
            copy = copy.next
            
        copy = dummy.next 
        while copy: #put random pointer to random's copy
            if copy.random: 
                copy.random = copy.random.next
            copy = copy.next
        return dummy.next
