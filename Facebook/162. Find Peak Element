class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        #O(n): 3 cases: 
            # descen -> first element
            # ascend -> last element
            # mid, when num[i] > num[i + 1]
        for i in range(len(nums)-1): 
            if nums[i] > nums[i+1]:
                return i
        return len(nums) - 1
-------------------------------------------------------------
1 .............[(n/2)-1] (n/2) [(n/2)+1]....................n 
key: look to left half first because of case: [1, 2]
we want to increase left first
if nums[n/2] < nums[(n/2)-1] => we only look to left half for peak
if nums[n/2] < nums[(n/2)+1] => we only look to right half for peak 
else: n/2 is the peak 

class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1 
        while left < right: 
            mid = (left + right) // 2
            if nums[mid] < nums[mid + 1]: 
                left = mid + 1
            elif nums[mid] < nums[mid - 1]: 
                right = mid - 1  
            else:
                return mid 
        return left 
