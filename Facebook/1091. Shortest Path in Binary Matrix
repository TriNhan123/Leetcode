print path instead of step 
from collections import deque
def shortestPathBinaryMatrix(grid):
        ROWS, COLS = len(grid), len(grid[0])
        def neighbors(r, c): 
            for rr, cc in [(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1), (r + 1, c + 1), 
                           (r - 1, c - 1), (r + 1, c - 1), (r - 1, c + 1)]: 
                if 0 <= rr < ROWS and 0 <= cc < COLS: 
                    yield rr, cc
        if grid[0][0] != 0 or grid[ROWS - 1][COLS - 1] != 0: 
            return -1
        q = deque([])
        q.append([0, 0, [(0, 0)]])
        visit = {(0, 0)}
        while q: 
            r, c, path = q.popleft() 
            if (r, c) == (ROWS - 1, COLS - 1): 
                return path
            for nr, nc in neighbors(r, c): 
                if (nr, nc) not in visit and grid[nr][nc] == 0: 
                    visit.add((nr, nc))
                    q.append((nr, nc, path + [(nr, nc)]))
        return -1
grid = [[0,0,0],[1,1,0],[1,1,0]]
print(shortestPathBinaryMatrix(grid))
