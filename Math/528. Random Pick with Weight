class Solution:

    def __init__(self, w: List[int]):
        self.ranges = []
        last_range = 0 
        for weight in w: 
            last_range += weight
            self.ranges.append(last_range) 
        self.sum = last_range

    def pickIndex(self) -> int:
        random_range = self.sum * random.random()
        for i, r in enumerate(self.ranges): 
            in_range = random_range < r
            if in_range: 
                return i 


# Your Solution object will be instantiated and called as such:
# obj = Solution(w)
# param_1 = obj.pickIndex()

# p picking index = weight at index / sum 
# if an index has heavier weights, more likely to be picked 
# using more space? numbers of index = weight / min weight 
# ex: 1, 3, create 3 index 1, 1 index 0 => guarantee % of picking index 1 to be 75%
# [1, 2, 3] sum = 6, target = 6 * 0.5 = 3, 6*0.6 = 3.6 ... => we have 50% picking range [3, 5]
# [1, 2, 2, 3 , 3 , 3] -> range for 1: [0], 2: [1, 2]; 3: [3, 5]
# find range:last range + weight (weight 3 take 3 more slot in range) 
# target = sum * p(random(0, 1))
