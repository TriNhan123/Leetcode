class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        ROWS, COLS = len(grid), len(grid[0])
        minute, fresh = 0, 0 
        q = deque()
        #find rotting oranges 
        for r in range(ROWS): 
            for c in range(COLS): 
                if grid[r][c] == 1:
                    fresh += 1 
                if grid[r][c] == 2: 
                    q.append([r, c])
        directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]
        #start with initial rotting oranges 
        while q and fresh > 0: 
            for i in range(len(q)): 
                r, c = q.popleft() 
                for dr, dc in directions:
                    adj_r, adj_c = r + dr, c + dc
                    if (0 <= adj_r < ROWS and 0 <= adj_c < COLS and 
                        grid[adj_r][adj_c] == 1): 
                        grid[adj_r][adj_c] = 2 
                        q.append([adj_r, adj_c])
                        fresh -= 1 
                    #if not in bound or != 1: move on 
                    continue
            #loop through a layer of q, increment 
            minute += 1 
        return minute if fresh == 0 else -1
