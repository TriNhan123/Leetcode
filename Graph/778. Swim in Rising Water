class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        ROWS, COLS = len(grid), len(grid[0])
        def neighbor(r, c): 
            for nr, nc in [[r + 1, c], [r - 1, c], [r, c + 1], [r, c - 1]]:
                if 0 <= nr < ROWS and 0 <= nc < COLS:
                    yield nr, nc
            
        minHeap = [[grid[0][0], 0, 0]]
        visit = set()
        visit.add((0, 0))
        while minHeap: 
            time, r, c = heapq.heappop(minHeap)
            if (r, c) == (ROWS - 1, COLS -1): 
                return time
            for nr, nc in neighbor(r, c): 
                if (nr, nc) not in visit:
                    heapq.heappush(minHeap, [max(grid[nr][nc], time), nr, nc])
                    visit.add((nr, nc))
