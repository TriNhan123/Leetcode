class Solution:
    def numDistinctIslands(self, grid: List[List[int]]) -> int:
        #DFS
        rows, cols = len(grid), len(grid[0])
        visit = set() 
        shape = set()
        def dfs(r, c): 
            if (r < 0 or r == rows or c < 0 or c == cols
                or grid[r][c] != 1 or (r, c) in visit): 
                return 
            isLand.append((r - origin_r, c - origin_c))
            visit.add((r, c)) 
            dfs(r + 1, c)
            dfs(r - 1, c)
            dfs(r, c + 1)
            dfs(r, c - 1)
        for r in range(rows): 
            for c in range(cols): 
                if grid[r][c] == 1 and (r, c) not in visit: 
                    isLand = []
                    origin_r = r 
                    origin_c = c 
                    dfs(r, c)
                    shape.add(tuple(isLand))
        return len(shape)   
