class Solution:
    def largestIsland(self, grid: List[List[int]]) -> int:
        ROWS, COLS = len(grid), len(grid[0])
         
        def neighbors(r, c): 
            for nr, nc in [(r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)]:
                if 0 <= nr < ROWS and 0 <= nc < COLS: 
                    yield nr, nc 
        
        def dfs(r, c, index): 
            area = 1 
            #marking this island with index
            grid[r][c] = index 
            for nr, nc in neighbors(r, c): 
                if grid[nr][nc] == 1: 
                    area += dfs(nr, nc, index)
            return area 
            
                
        area_idx = {} 
        index = 2 #since grid = 0 or 1 
        for r in range(ROWS): 
            for c in range(COLS): 
                if grid[r][c] == 1: 
                    area_idx[index] = dfs(r, c, index)
                    index += 1 
        ans = max(area_idx.values() or [0])
        for r in range(ROWS): 
            for c in range(COLS): 
                if grid[r][c] == 0: 
                    surround_islands = set()
                    for nr, nc in neighbors(r, c): 
                        if grid[nr][nc] > 1: 
                            surround_islands.add(grid[nr][nc])
                    ans = max(ans, 1 + sum(area_idx[i] for i in surround_islands))
        return ans
