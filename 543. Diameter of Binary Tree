# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
#Diameter = longest path between 2 leaves node. 
#At each node with both left and right children, 
  #we need to keep going on the LONGER path between them and use diameter to track the total path.
class Solution:
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int: 
        diameter = 0 
        def dfs(node): 
            nonlocal diameter 
            if not node:
                return 0 
            left = dfs(node.left) 
            right = dfs(node.right) 
            diameter = max(diameter, left + right) 
            return 1 + max(left, right) 
        dfs(root)
        return diameter
