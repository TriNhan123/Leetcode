class Solution:
    def removeInvalidParentheses(self, s: str) -> List[str]:
        def isValid(expr):
            count = 0
            for ch in expr:
                if ch not in '()': continue
                if ch == '(':
                    count += 1
                elif ch == ')':
                    count -= 1
                if count < 0: return False
            return count == 0
            
        #remove parentheses by layer: 
        #remove 1 parenth at each inedx, add new string into queue, 
        #if valid, we stop removing, if repeat same process with new string => total removal increase for new string 
        
        if len(s) == 0:
            return [""]
        visit = set() 
        q = deque([(s)])
        res = []
        found = False 
        while q: 
            expr = q.popleft() 
            if isValid(expr): 
                res.append(expr) 
                found = True 
            if found: 
                continue 
            for i in range(len(expr)): 
                if expr[i] not in "()": 
                    continue 
                remove_i = expr[ : i] + expr[i + 1 :]
                if remove_i not in visit: 
                    q.append(remove_i)
                    visit.add(remove_i)
        return res
