class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        know = {0, firstPerson}
        
        s = sorted(meetings, key=lambda x:x[2])  # sort by meeting time
        for time, group in groupby(s, key=lambda x:x[2]):  # group by meeting time
            visit = set() 
            q = deque([])
            graph = defaultdict(set)
            for x, y, _ in group:
                graph[x].add(y)
                graph[y].add(x)
                if x in know and x not in visit: 
                    q.append(x)
                    visit.add(x)
                if y in know and y not in visit: 
                    q.append(y)
                    visit.add(y) 

            while q:
                cur = q.pop()
                for adj in graph[cur]:
                    if adj not in know and adj not in visit:
                        visit.add(adj)
                        know.add(adj) 
                        q.append(adj)
        return know 
-------------------------------------------------------------------------------------------------
class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        #if time secret > time meeting => can't share 
        know = {0, firstPerson} # people know secret
        
        s = sorted(meetings, key=lambda x:x[2])  # sort by meeting time
        for time, group in groupby(s, key=lambda x:x[2]):  # group by meeting time
            q = set() # queue
            graph = defaultdict(set)
            for x, y, _ in group:
                graph[x].add(y)
                graph[y].add(x)
                if x in know: q.add(x)
                if y in know: q.add(y)
            
            # go through q
            q = list(q)
            while q:
                cur = q.pop()
                for adj in graph[cur]:
                    if adj not in know:
                        know.add(adj)  # add new people with secret
                        q.append(adj)
        return know
