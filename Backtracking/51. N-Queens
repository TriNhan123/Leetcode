class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        #we try placing each queen on a row 
            #since 2 queens can't be on 1 row 
            #if row == n then we placed all the queens 
        #for each row, we have four choices of col
        col = set() 
        posDiag = set() 
        negDiag= set()
        
        ans = []
        board = [["."] * n for i in range(n)]
        
        def dfs(r):
            if r == n: 
                copy_row = ["".join(row) for row in board]
                ans.append(copy_row)
                return 
            for c in range(n): 
                if c in col or (r + c) in posDiag or (r - c) in negDiag: 
                    continue 
                board[r][c] = "Q"
                col.add(c)
                posDiag.add(r + c) 
                negDiag.add(r - c) 
                
                dfs(r + 1) 
                
                col.remove(c)
                posDiag.remove(r + c)
                negDiag.remove(r - c) 
                board[r][c] = "."
        dfs(0) 
        
        return ans
